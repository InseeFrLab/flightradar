---
lang: fr-FR
title: Améliorations supplémentaires de l'interface utilisateur

format:
  html:
    number-sections: true
---

Dans cette partie on propose deux améliorations à l'interface utilisateur qui font l'objet de deux exercices:

- On souhaite d'abord afficher des informations supplémentaires concernant chaque vol lorsqu'un utilise clique sur un marqueur;
- On souhaite ajouter un menu permettant à l'utilisateur de choisir la compagnie aérienne dont il souhaite observer les vols.

::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 5: Informations supplémentaires sur chaque vol

Le code pour cet exercice se trouve dans le répertoire `final_app`. Ce code correspond à l'application qui devrait être obtenue à la fin de l'exercice précédent. Pour afficher des informations supplémentaires sur chaque vol, il faut procéder en deux étapes.

1. Dans le fichier `final_app/utils.py`, modifier la fonction `fetch_flight_data` pour inclure davantage d'information dans les dictionnaires de vols.

```{python}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false
def fetch_flight_data(
    client: FlightRadar24API,
    airline_icao: Optional[str] = None,
    aircraft_type: Optional[str] = None,
    zone_str: Optional[str] = None
) -> List[Dict]:
    """
    Fetch flight data from FlightRadar24 API for
    a given airline, aircraft type and zone.

    Args:
        client (FlightRadar24API): FlightRadar24API client.
        airline_icao (str): ICAO code of the airline.
        aircraft_type (str): Type of aircraft.
        zone_str (str): Zone string.

    Returns:
        List[Dict]: List of flights. A flight should be represented
            as a dictionary with latitude, longitude, id and additional
            keys.
    """
    zone = client.get_zones()[zone_str]
    bounds = client.get_bounds(zone)

    flights = client.get_flights(
        aircraft_type=aircraft_type,
        airline=airline_icao,
        bounds=bounds
    )
    return [
        {
            "latitude": flight.latitude,
            "longitude": flight.longitude,
            "id": flight.id,
            "origin_airport_iata": flight.origin_airport_iata,
            "destination_airport_iata": flight.destination_airport_iata,
            "ground_speed": flight.ground_speed,
        } for flight in flights
    ]
```

2. Pour afficher plus d'informations dans l'application, il faut modifier le contenu de la fonction `update_graph_live` dans `final_app/main.py`, et plus spécifiquement l'argument `children` du constructeur `dl.Marker`. Implémenter ce changement.

```{python}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false
@app.callback(
    ...
)
def update_graph_live(n, previous_data):
    ...

    # Update map children by adding markers to the default tiles layer
    children = default_map_children + [
        dl.Marker(
            position=[flight['latitude'], flight['longitude']],
            children=[
                dl.Popup(html.Div([
                    dcc.Markdown(f'''
                        **Identifiant du vol**: {flight['id']}.

                        **Aérport d'origine**: {flight['origin_airport_iata']}.

                        **Aéroport de destination**: {flight['destination_airport_iata']}.

                        **Vitesse au sol**: {flight['ground_speed']} noeuds.
                    ''')
                ]))
            ],
            icon=get_custom_icon(
                get_closest_round_angle(flight['rotation_angle'])
            ),
        ) for flight in data
    ]

    return [children, data]
```

3. Exécuter l'application en lançant depuis la racine du projet dans un Terminal la commande
```
python final_app/main.py
```

Vous devriez obtenir davantage d'informations sur un vol en cliquant dessus, en fonction des changements que vous avez effectués.

:::


::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 6: Ajout d'un filtre sur la compagnie aérienne


:::