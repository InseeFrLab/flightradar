[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reconstruction de l’interface utilisateur de FlightRadar24",
    "section": "",
    "text": "Flightradar24 est un service de suivi des vols qui fournit des informations en temps réel sur des milliers d’avions dans le monde entier. Le site Internet propose une visualisation interactive des vols en cours à chaque instant, comportant des informations issues de plusieurs sources sur chaque vol. Des données de position sont agrégées avec des données sur les horaires et le statut des vols provenant des compagnies aériennes et des aéroports.\n\n\n\nSite Internet FlightRadar24\n\n\nFlightradar24 vend la plupart de ces données disponibles en temps réel, ainsi que des fichiers d’historiques de vols. Certaines données en temps réel sont toutefois disponibles en accès libre. Il est possible de récupérer ces données de manière programmatique en utilisant par exemple cette librarie Python.\nAvec ce sujet, nous vous proposons de reconstruire une interface utilisateur qui se rapproche de celle du site FlightRadar24 avec Python.\n\n\n\nReconstruction de l’interface utilisateur FlightRadar24\n\n\nAinsi, ce sujet vous permettra :\n\nDe récupérer les données de FlightRadar24 avec interface de programmation Python;\nDéveloppement d’un site interactif avec Dash, un framework Python réputé servant à construire des applications de visualisation de données."
  },
  {
    "objectID": "index.html#récupérer-le-projet-avec-git",
    "href": "index.html#récupérer-le-projet-avec-git",
    "title": "Reconstruction de l’interface utilisateur de FlightRadar24",
    "section": "2.1 Récupérer le projet avec Git ",
    "text": "2.1 Récupérer le projet avec Git \nPour se lancer dans le sujet, commencer par ouvrir un service Vscode-python (par exemple), en modifiant l’onglet Networking de la configuration (cocher la case “Enable a custom service port”). Dans le service, cloner le projet depuis un Terminal avec la commande\ngit clone https://github.com/InseeFrLab/funathon2024_sujet3.git\nLe projet a la structure suivante :\n\nLes fichiers .qmd ainsi que le fichier _quarto.yaml ont servi à la construction de ce site;\n…\nDans le répertoire app se trouve une version d’une application de visualisation."
  },
  {
    "objectID": "index.html#installation-les-librairies-nécessaires",
    "href": "index.html#installation-les-librairies-nécessaires",
    "title": "Reconstruction de l’interface utilisateur de FlightRadar24",
    "section": "2.2 Installation les librairies nécessaires",
    "text": "2.2 Installation les librairies nécessaires\nPour progresser, il vous faudra installer quelques librairies qui sont listées dans le fichier requirements.txt. Pour ce faire, depuis un Terminal, exécutez la commande\npip install -r requirements.txt"
  },
  {
    "objectID": "1-api.html",
    "href": "1-api.html",
    "title": "Interaction avec l’API FlightRadar24",
    "section": "",
    "text": "Cette librairie Python propose une API permettant d’accéder aux données gratuites de FlightRadar24. Une documentation est accessible ici. Pour utiliser l’API, l’idée est d’initialiser un client et de faire appel à plusieurs méthodes pour récupérer différents types de données. Passons à l’exercice.\n\n\n\n\n\n\n Exercice 1 : Utilisation de l’API FlightRadarAPI\n\n\n\n\n\n\nInitialiser un client FlightRadar24API.\n\n\n\nCliquer pour voir la réponse\nfrom FlightRadar24 import FlightRadar24API\nfr_api = FlightRadar24API()\n\n\n\nEn utilisant le client, compter le nombre de compagnies aériennes.\n\n\n\nCliquer pour voir la réponse\nairlines = fr_api.get_airlines()\nprint(f\"Il y a {len(airlines)} compagnies aériennes différentes dont on peut récupérer les vols.\")\n\n\nIl y a 2144 compagnies aériennes différentes dont on peut récupérer les vols.\n\n\n\nCompter le nombre de zones géographiques utilisables et en afficher une selection. Indice : la méthode FlightRadar24API.get_zones retourne un dictionnaire contenant une clé pour chaque zone.\n\n\n\nCliquer pour voir la réponse\nzones = fr_api.get_zones().keys()\nzones = list(zones)\nprint(f\"Il y a {len(zones)} zones différentes, dont les zones '{zones[0]}', '{zones[1]}', '{zones[2]}', etc.\")\n\n\nIl y a 9 zones différentes, dont les zones 'europe', 'northamerica', 'southamerica', etc.\n\n\n\nOn souhaite maintenant récupérer les vols de Boeing 77W en activité en Europe de la compagnie aérienne Air France. Utiliser la méthode FlightRadar24API.get_flights pour donner un compte de ces vols. La chaîne de caractères qui représente Air France est \"AFR\" et celle qui représente le type d’aéronef est \"B77W\". Indice : la méthode à utiliser prend un argument bounds, que la méthode FlightRadar24API.get_bounds permet de récupérer à partir d’une zone géographique.\n\n\n\nCliquer pour voir la réponse\nairline_icao = \"AFR\"\naircraft_type = \"B77W\"\n\nzone = fr_api.get_zones()[\"europe\"]\nbounds = fr_api.get_bounds(zone)\n\nafr_flights = fr_api.get_flights(\n    aircraft_type = aircraft_type,\n    airline = airline_icao,\n    bounds = bounds\n)\nprint(f\"{len(afr_flights)} aéronefs B77W d'Air France sont actuellement en activité en Europe.\")\n\n\n12 aéronefs B77W d'Air France sont actuellement en activité en Europe.\n\n\n\nIl est possible de changer la configuration du client avec les méthodes FlightRadar24API.get_flight_tracker_config et FlightRadar24API.set_flight_tracker_config. Changer la configuration pour récupérer 5 vols à l’aide de la méthode FlightRadar24API.get_flights sans fournir d’argument.\n\n\n\nCliquer pour voir la réponse\nflight_tracker = fr_api.get_flight_tracker_config()\nflight_tracker.limit = 5\nfr_api.set_flight_tracker_config(flight_tracker)\n\nflights = fr_api.get_flights()\nprint(f\"Informations récupérées sur {len(flights)} vols.\")\n\n\nInformations récupérées sur 5 vols.\n\n\n\nPour analyser les détails d’un vol, il faut utiliser les méthodes FlightRadar24API.get_flight_details pour collecter les détails et Flight.set_flight_details pour les attribuer au vol (par défaut seulement quelques informations sont collectées). Explorer les informations disponibles sur un vol (objet de la classe Flight). Par exemple on pourra regarder les attributs suivants :\n\n\nlatitude: Latitude de l’aéronef;\nlongitude: Longitude de l’aéronef;\nid: Identifiant du vol;\nicao_24bit: Identifiant de l’aéronef;\nheading: Cap de vol (en degrés);\naltitude: Altitude (en pieds);\nground_speed: Vitesse au sol (en noeuds);\naircraft_code: Type d’aéronef;\norigin_airport_name: Aéroport d’origine;\ndestination_airport_name: Aéroport de destination;\nairline_iata: Code IATA de compagnie aérienne;\nvertical_speed: Vitesse verticale (en pieds par minute);\nairline_icao: Code ICAO de compagnie aérienne.\n\nEssayez d’identifier les différentes informations associées à un vol.\n\n\nCliquer pour voir la réponse\nflight = flights[2]\nflight_details = fr_api.get_flight_details(flight)\nflight.set_flight_details(flight_details)\nprint(\n  f\"Le vol {flight.id} au départ de l'aéroport {flight.origin_airport_name} \"\n  f\"et à destination de {flight.destination_airport_name} se déplace à une vitesse \"\n  f\"de {flight.ground_speed} noeuds.\"\n)\nprint(\n  f\"L'appareil est un aéronef {flight.aircraft_code} de la compagnie {flight.airline_icao}.\"\n)\n\n\nLe vol 359cdc9c au départ de l'aéroport New York Newark Liberty International Airport et à destination de Singapore Changi Airport se déplace à une vitesse de 0 noeuds.\nL'appareil est un aéronef A359 de la compagnie SIA.\n\n\n\n\n\nDans la partie suivante, nous allons développer une première application de visualisation de vols utilisant cette API Python !"
  }
]